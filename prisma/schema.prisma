generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([email, token])
  @@map("password_resets")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  bio                     String?
  password                String?
  role                    String                  @default("USER")
  referralCode            String                  @unique @default(cuid())
  referredBy              String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  username                String?                 @unique
  firstName               String?
  lastName                String?
  phone                   String?
  avatar                  String?
  isActive                Boolean                 @default(true)
  tasksEnabled            Boolean                 @default(true)
  isAdmin                 Boolean                 @default(false)
  sponsorId               String?
  sponsor                 User?                   @relation("Referrals", fields: [sponsorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals               User[]                  @relation("Referrals")
  balance                 Float                   @default(0)
  totalEarnings           Float                   @default(0)
  pendingCommission       Float                   @default(0)
  availableVoucherPkr     Float                   @default(0)
  totalPoints             Int                     @default(0)
  tasksCompleted          Int                     @default(0)
  
  // New Membership Plan Fields
  membershipPlan          String?                 // "BASIC", "STANDARD", "PREMIUM"
  membershipStatus        String                  @default("INACTIVE") // "INACTIVE", "ACTIVE", "EXPIRED"
  membershipStartDate     DateTime?
  membershipEndDate       DateTime?
  taskEarnings            Float                   @default(0)
  referralEarnings        Float                   @default(0)
  dailyTasksCompleted     Int                     @default(0)
  lastTaskCompletionDate  DateTime?
  earningsContinueUntil   DateTime?               // Extended earning period based on referrals
  minimumWithdrawal       Float                   @default(2000)        // Plan-specific minimum withdrawal
  renewalCount            Int                     @default(0)           // Number of times membership renewed
  lastRenewalDate         DateTime?                                     // Last renewal timestamp
  expirationNotified      Boolean                 @default(false)       // Track if expiration notification sent
  blogComments            BlogComment[]
  blogPosts               BlogPost[]
  commissionUpdates       CommissionSettings[]    @relation("CommissionUpdatedBy")
  notificationPreferences NotificationPreference?
  createdTemplates        NotificationTemplate[]  @relation("CreatedTemplates")
  createdNotifications    Notification[]          @relation("CreatedNotifications")
  notifications           Notification[]          @relation("UserNotifications")
  orders                  Order[]
  cart                    Cart?
  taskCompletions         TaskCompletion[]
  processedWithdrawals    WithdrawalRequest[]     @relation("WithdrawalProcessor")
  withdrawalRequests      WithdrawalRequest[]     @relation("UserWithdrawals")
  messageReactions        MessageReaction[]       @relation("MessageReactions")
  blockedBy               UserBlock[]             @relation("BlockedBy")
  blocks                  UserBlock[]             @relation("UserBlocks")

  // Profile Settings
  location                String?
  website                 String?
  birthdate               DateTime?
  coverImage              String?
  
  // Privacy Settings
  profileVisibility       String              @default("public")
  showEmail               Boolean             @default(false)
  showPhone               Boolean             @default(false)
  showBirthdate           Boolean             @default(false)
  allowMessages           Boolean             @default(true)
  allowFollows            Boolean             @default(true)
  showOnlineStatus        Boolean             @default(true)
  
  // Notification Settings
  emailNotifications      Boolean             @default(true)
  pushNotifications       Boolean             @default(true)
  postLikes               Boolean             @default(true)
  postComments            Boolean             @default(true)
  newFollowers            Boolean             @default(true)
  directMessages          Boolean             @default(true)
  partnershipUpdates      Boolean             @default(true)
  weeklyDigest            Boolean             @default(true)
  
  // Partnership Settings
  partnerLevel            String              @default("Bronze")
  teamRole                String              @default("Member")
  mentorId                String?
  specializations         String?             // JSON array as string
  achievements_list       String?             // JSON array as string

  // Return and Transaction Relations
  returnRequests          ReturnRequest[]     @relation("UserReturnRequests")
  userTransactions        Transaction[]       @relation("UserTransactions")
  manualPayments          ManualPayment[]
  
  referralEarningHistory  ReferralEarningHistory[]
  paymentConfirmations    PaymentConfirmation[]
  
  // Social Media Relations
  socialPosts             SocialPost[]
  socialLikes             SocialLike[]
  socialComments          SocialComment[]
  socialShares            SocialShare[]
  socialReports           SocialReport[]
  followersRelation       SocialFollow[]          @relation("UserFollowers")
  followingRelation       SocialFollow[]          @relation("UserFollowing")
  
  // Achievement Relations
  userAchievements        UserAchievement[]
  
  // Team Relations
  teamLeaderRelations     TeamMember[]            @relation("TeamLeader")
  teamMemberRelations     TeamMember[]            @relation("TeamMemberUser")
  
  // Favorite Relations
  favorites               Favorite[]
  
  // Profile Like Relations
  profileLikesGiven       ProfileLike[]           @relation("ProfileLikesGiven")
  profileLikesReceived    ProfileLike[]           @relation("ProfileLikesReceived")
  
  // Message Relations
  messagesSent            DirectMessage[]         @relation("MessagesSent")
  messagesReceived        DirectMessage[]         @relation("MessagesReceived")
  
  // Friend Request Relations
  sentFriendRequests      FriendRequest[]         @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedFriendRequests")
  
  // Friendship Relations
  friendshipsAsUser1      Friendship[]            @relation("FriendshipsAsUser1")
  friendshipsAsUser2      Friendship[]            @relation("FriendshipsAsUser2")
  
  // Membership Relations
  membershipPlanRelation  MembershipPlan[]        @relation("UserMembershipPlans")
  
  // Task Relations
  taskEarningHistory      TaskEarningHistory[]
  
  // Review Relations
  reviews                 Review[]
  deliveryReviews         DeliveryReview[]
  
  @@index([email])
  @@index([referralCode])
  @@index([sponsorId])
  @@index([membershipPlan, membershipStatus])
  @@map("users")
}

// Cart Model for persistent cart storage
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float    // Store price at time of adding to cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  orderNumber     String      @unique
  items           OrderItem[]
  subtotalPkr     Float
  voucherUsedPkr  Float       @default(0)
  shippingPkr     Float       @default(0)
  totalPkr        Float
  paidAmountPkr   Float       @default(0)
  status          String      @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  paymentMethod   String
  paymentStatus   String      @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  shippingAddress String
  city            String
  province        String?
  postalCode      String?
  phone           String
  email           String
  trackingNumber  String?
  notes           String?
  adminNotified   Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  returnRequests  ReturnRequest[] @relation("OrderReturnRequests")
  reviews         Review[]
  deliveryReviews DeliveryReview[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  productName String  // Store product name at time of order
  quantity    Int
  price       Float   // Store price at time of order
  totalPrice  Float   // quantity * price
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  color     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     BlogPost[] @relation("BlogPostToBlogTag")

  @@map("blog_tags")
}

model BlogPost {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  content         String
  excerpt         String?
  featuredImage   String?
  status          String        @default("DRAFT")
  publishedAt     DateTime?
  scheduledAt     DateTime?
  authorId        String
  categoryId      String
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  views           Int           @default(0)
  likes           Int           @default(0)
  featured        Boolean       @default(false)
  shares          Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  comments        BlogComment[]
  category        BlogCategory  @relation(fields: [categoryId], references: [id])
  author          User          @relation(fields: [authorId], references: [id])
  tags            BlogTag[]     @relation("BlogPostToBlogTag")

  @@map("blog_posts")
}

model BlogComment {
  id         String        @id @default(cuid())
  content    String
  authorId   String
  postId     String
  parentId   String?
  isApproved Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  parent     BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    BlogComment[] @relation("CommentReplies")
  post       BlogPost      @relation(fields: [postId], references: [id])
  author     User          @relation(fields: [authorId], references: [id])

  @@map("blog_comments")
}

model ProductCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String?   @default("#3B82F6")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("product_categories")
}

model Product {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String
  price           Float
  comparePrice    Float?
  costPrice       Float?
  sku             String?          @unique
  barcode         String?
  trackQuantity   Boolean          @default(true)
  quantity        Int              @default(0)
  minQuantity     Int              @default(0)
  status          String           @default("DRAFT")
  scheduledAt     DateTime?
  images          String
  weight          Float?
  dimensions      String?
  categoryId      String?
  category        ProductCategory? @relation(fields: [categoryId], references: [id])
  tags            String?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  views           Int              @default(0)
  sales           Int              @default(0)
  rating          Float?           @default(0)
  reviewCount     Int              @default(0)
  trending        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]

  @@map("products")
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  type            String
  category        String
  difficulty      String           @default("MEDIUM")
  reward          Float            @default(0)
  status          String           @default("ACTIVE")
  target          Int              @default(1)
  timeLimit       Int?
  startDate       DateTime?
  endDate         DateTime?
  instructions    String?
  icon            String?
  color           String?
  completions     Int              @default(0)
  attempts        Int              @default(0)
  // Article tracking fields
  articleUrl      String?
  minDuration     Int?             @default(45)
  requireScrolling Boolean?         @default(false)
  requireMouseMovement Boolean?     @default(false)
  minScrollPercentage Int?          @default(50)
  minAdClicks     Int?             @default(0)
  maxAttempts     Int?             @default(3)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  taskCompletions TaskCompletion[]

  @@map("tasks")
}

model TaskCompletion {
  id          String    @id @default(cuid())
  userId      String
  taskId      String
  status      String    @default("PENDING")
  progress    Int       @default(0)
  reward      Float     @default(0)
  notes       String?
  // Article tracking data
  trackingData String?  // JSON string containing tracking information
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  task        Task      @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, taskId])
  @@map("task_completions")
}

model Notification {
  id           String    @id @default(cuid())
  title        String
  message      String
  type         String    @default("info")
  category     String?
  priority     String    @default("normal")
  recipientId  String?
  role         String?
  audience     String?
  data         String?
  actionUrl    String?
  actionText   String?
  imageUrl     String?
  isRead       Boolean   @default(false)
  isDelivered  Boolean   @default(false)
  deliveredAt  DateTime?
  readAt       DateTime?
  clickedAt    DateTime?
  scheduledFor DateTime?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  isGlobal     Boolean   @default(false)
  createdById  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    User?     @relation("CreatedNotifications", fields: [createdById], references: [id])
  recipient    User?     @relation("UserNotifications", fields: [recipientId], references: [id])

  @@index([recipientId, isRead])
  @@index([createdAt])
  @@index([type, isActive])
  @@map("notifications")
}

model CommissionSettings {
  id            String   @id @default(cuid())
  level         Int      @unique
  rate          Float
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  updatedBy     String?
  updatedByUser User?    @relation("CommissionUpdatedBy", fields: [updatedBy], references: [id])

  @@map("commission_settings")
}

model ReturnRequest {
  id              String   @id @default(cuid())
  returnNumber    String   @unique
  userId          String
  orderId         String
  reason          String
  description     String
  requestedAmount Float
  refundAmount    Float?
  returnType      String   @default("REFUND") // REFUND, EXCHANGE, STORE_CREDIT
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED, PROCESSING, COMPLETED
  adminNotes      String?
  refundMethod    String?
  processedBy     String?
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation("UserReturnRequests", fields: [userId], references: [id])
  order           Order    @relation("OrderReturnRequests", fields: [orderId], references: [id])
  
  @@index([userId])
  @@index([orderId])
  @@index([status])
  @@map("return_requests")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // REFUND, WITHDRAWAL, DEPOSIT, COMMISSION, TASK_EARNING
  amount      Float
  description String
  status      String   @default("PENDING") // PENDING, COMPLETED, FAILED
  reference   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation("UserTransactions", fields: [userId], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([status])
  @@map("transactions")
}

model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailEnabled          Boolean  @default(true)
  emailNewMessages      Boolean  @default(true)
  emailCommissions      Boolean  @default(true)
  emailReferrals        Boolean  @default(true)
  emailTasks            Boolean  @default(true)
  emailOrders           Boolean  @default(true)
  emailBlog             Boolean  @default(false)
  emailPromotions       Boolean  @default(false)
  pushEnabled           Boolean  @default(true)
  pushNewMessages       Boolean  @default(true)
  pushCommissions       Boolean  @default(true)
  pushReferrals         Boolean  @default(true)
  pushTasks             Boolean  @default(true)
  pushOrders            Boolean  @default(true)
  pushBlog              Boolean  @default(false)
  inAppEnabled          Boolean  @default(true)
  inAppSounds           Boolean  @default(true)
  inAppDesktop          Boolean  @default(true)
  digestFrequency       String   @default("daily")
  quietHoursStart       Int?
  quietHoursEnd         Int?
  timezone              String   @default("Asia/Karachi")
  groupSimilar          Boolean  @default(true)
  maxDailyNotifications Int      @default(50)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])

  @@map("notification_preferences")
}

model WithdrawalRequest {
  id              String    @id @default(cuid())
  userId          String
  amount          Float
  paymentMethod   String
  paymentDetails  String
  status          String    @default("PENDING")
  requestedAt     DateTime  @default(now())
  processedAt     DateTime?
  processedBy     String?
  rejectionReason String?
  transactionId   String?
  notes           String?
  processor       User?     @relation("WithdrawalProcessor", fields: [processedBy], references: [id])
  user            User      @relation("UserWithdrawals", fields: [userId], references: [id])

  @@map("withdrawal_requests")
}


model NotificationTemplate {
  id          String    @id @default(cuid())
  name        String    @unique
  title       String
  message     String
  type        String    @default("info")
  category    String?
  priority    String    @default("normal")
  variables   String?
  defaultData String?
  actionUrl   String?
  actionText  String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  usageCount  Int       @default(0)
  lastUsedAt  DateTime?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("CreatedTemplates", fields: [createdById], references: [id])

  @@map("notification_templates")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  location  String
  message   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

// Social Media Models
model SocialPost {
  id          String         @id @default(cuid())
  content     String
  imageUrl    String?
  videoUrl    String?
  mediaUrls   String?
  coverUrl    String?
  reelMeta    String?
  type        String         @default("general") // 'achievement', 'tip', 'success', 'general'
  status      String         @default("ACTIVE") // 'ACTIVE', 'HIDDEN', 'DELETED'
  authorId    String
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       SocialLike[]
  comments    SocialComment[]
  shares      SocialShare[]
  reports     SocialReport[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("social_posts")
}

model SocialLike {
  id        String     @id @default(cuid())
  postId    String
  userId    String
  post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@unique([postId, userId])
  @@map("social_likes")
}

model SocialComment {
  id        String     @id @default(cuid())
  content   String
  postId    String
  userId    String
  post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("social_comments")
}

model SocialShare {
  id        String     @id @default(cuid())
  postId    String
  userId    String
  platform  String?    // 'facebook', 'twitter', 'whatsapp', etc.
  post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@map("social_shares")
}

model SocialReport {
  id         String     @id @default(cuid())
  postId     String
  reporterId String
  reason     String?
  post       SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporter   User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())

  @@map("social_reports")
}

model SocialFollow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("social_follows")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String
  icon          String
  type          String   // 'sales', 'team', 'milestone', 'special'
  points        Int      @default(0)
  isPublic      Boolean  @default(true)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@map("user_achievements")
}

model TeamMember {
  id           String   @id @default(cuid())
  leaderId     String
  memberId     String
  role         String   @default("member") // 'member', 'assistant', 'manager'
  status       String   @default("active") // 'active', 'inactive', 'pending'
  commission   Float    @default(0)
  level        Int      @default(1)
  joinedAt     DateTime @default(now())
  leader       User     @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: Cascade)
  member       User     @relation("TeamMemberUser", fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([leaderId, memberId])
  @@map("team_members")
}

// Favorites and Profile Likes
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'PRODUCT' | 'ARTICLE' | 'PERSON' | 'TASK' | 'POST'
  targetId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, targetId])
  @@map("favorites")
}

model ProfileLike {
  id            String   @id @default(cuid())
  userId        String
  targetUserId  String
  createdAt     DateTime @default(now())

  user         User     @relation("ProfileLikesGiven", fields: [userId], references: [id], onDelete: Cascade)
  targetUser   User     @relation("ProfileLikesReceived", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId])
  @@map("profile_likes")
}

model DirectMessage {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  content     String
  messageType String   @default("text") // 'text', 'media'
  attachments String?  // JSON string for file attachments
  images      String?  // JSON string for image URLs
  status      String   @default("sent") // 'sent', 'delivered', 'read'
  replyToId   String?  // For threaded replies
  isEdited    Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  editedAt    DateTime?
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User     @relation("MessagesReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  replyTo     DirectMessage? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     DirectMessage[] @relation("MessageReplies")
  reactions   MessageReaction[]

  @@map("direct_messages")
}

model UserBlock {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())
  
  blocker   User     @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  
  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  reaction  String
  createdAt DateTime @default(now())
  
  message   DirectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User          @relation("MessageReactions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@map("message_reactions")
}

// Social graph: Friend Requests and Friendships
model FriendRequest {
  id           String   @id @default(cuid())
  senderId     String
  recipientId  String
  status       String   @default("pending") // pending, accepted, rejected
  createdAt    DateTime @default(now())
  respondedAt  DateTime?

  sender       User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  recipient    User     @relation("ReceivedFriendRequests", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([senderId, recipientId])
  @@index([recipientId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  status    String   @default("active") // active, blocked
  createdAt DateTime @default(now())

  user1     User     @relation("FriendshipsAsUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("FriendshipsAsUser2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@map("friendships")
}

// New Membership Plan Models
model MembershipPlan {
  id                    String   @id @default(cuid())
  name                  String   @unique // "BASIC", "STANDARD", "PREMIUM"
  displayName           String   // "Basic Plan", "Standard Plan", "Premium Plan"
  price                 Float    // 1000, 3000, 8000
  dailyTaskEarning      Float    // 50, 150, 400
  tasksPerDay            Int      @default(5) // number of tasks allowed per day for this plan
  maxEarningDays        Int      @default(30) // Base earning period
  extendedEarningDays   Int      @default(60) // With referral extension
  minimumWithdrawal     Float    // 2000, 4000, 10000
  voucherAmount         Float    @default(500) // Product voucher amount
  isActive              Boolean  @default(true)
  description           String?
  features              String?  // JSON string of plan features
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  users                 User[]   @relation("UserMembershipPlans")
  referralCommissions   ReferralCommission[]
  
  @@map("membership_plans")
}

model ReferralCommission {
  id               String         @id @default(cuid())
  membershipPlanId String
  level            Int            // 1, 2, 3, 4, 5
  amount           Float          // Commission amount for this level
  percentage       Float?         // Optional percentage representation
  description      String?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  membershipPlan   MembershipPlan @relation(fields: [membershipPlanId], references: [id], onDelete: Cascade)
  
  @@unique([membershipPlanId, level])
  @@map("referral_commissions")
}

model TaskEarningHistory {
  id                String   @id @default(cuid())
  userId            String
  membershipPlan    String   // "BASIC", "STANDARD", "PREMIUM"
  dailyEarning      Float    // Amount earned for that day
  tasksCompleted    Int      // Number of tasks completed that day
  earningDate       DateTime // Date of earning
  isExtendedPeriod  Boolean  @default(false) // Whether this was during extended period
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, earningDate])
  @@map("task_earning_history")
}

model ReferralEarningHistory {
  id               String   @id @default(cuid())
  userId           String   // User who earned the commission
  referredUserId   String   // User who was referred
  membershipPlan   String   // Plan of the referred user
  level            Int      // Commission level (1-5)
  amount           Float    // Commission amount earned
  earningDate      DateTime @default(now())
  createdAt        DateTime @default(now())
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("referral_earning_history")
}

// Payment Settings for Manual Payments
model PaymentSettings {
  id                String   @id @default(cuid())
  type              String   // "JAZZCASH", "EASYPAISA", "BANK_ACCOUNT", "OTHER"
  accountTitle      String   // Account holder name
  accountNumber     String   // Phone number or account number
  bankName          String?  // For bank accounts
  branchCode        String?  // For bank accounts
  iban              String?  // For bank accounts
  isActive          Boolean  @default(true)
  displayOrder      Int      @default(0)
  monthlyLimitPkr   Float?   // Optional monthly limit for wallets (e.g., JazzCash 200,000 PKR)
  instructions      String?  // Special instructions for users
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("payment_settings")
}

// Manual Payment Confirmations
model PaymentConfirmation {
  id                String   @id @default(cuid())
  userId            String
  membershipPlan    String
  amount            Float
  paymentMethod     String   // Which payment method was used
  paymentDetails    String   // Transaction details, reference number, etc.
  paymentProof      String?  // Screenshot or proof image URL
  status            String   @default("PENDING") // "PENDING", "VERIFIED", "REJECTED"
  adminNotes        String?  // Admin notes for verification
  verifiedBy        String?  // Admin who verified
  verifiedAt        DateTime?
  rejectionReason   String?  // If rejected
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payment_confirmations")
}

// Plan Extension Settings
model PlanExtensionSettings {
  id                String   @id @default(cuid())
  membershipPlan    String   @unique // "BASIC", "STANDARD", "PREMIUM", etc.
  baseDays          Int      @default(30)   // Base earning period
  extendedDays      Int      @default(60)   // Extended period with referrals
  maxExtensionDays  Int      @default(90)   // Maximum possible extension
  extensionRules    String?  // JSON string with extension rules
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("plan_extension_settings")
}

// Error Logging Model
model ErrorLog {
  id          String   @id @default(cuid())
  message     String
  stack       String?
  url         String?
  userAgent   String?
  userId      String?
  severity    String   @default("error") // "error", "warning", "info"
  resolved    Boolean  @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("error_logs")
}

// Payment Method Model
model PaymentMethod {
  id              String   @id @default(cuid())
  name            String   // "JazzCash", "EasyPaisa", "Bank Transfer", etc.
  type            String   // "MOBILE_WALLET", "BANK_ACCOUNT", "CARD", "OTHER"
  accountTitle    String   // Account holder name
  accountNumber   String   // Phone number or account number
  bankName        String?  // For bank accounts
  branchCode      String?  // For bank accounts
  iban            String?  // For bank accounts
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false)
  displayOrder    Int      @default(0)
  instructions    String?  // Special instructions for users
  minAmount       Float?   // Minimum transaction amount
  maxAmount       Float?   // Maximum transaction amount
  processingFee   Float    @default(0)
  processingTime  String?  // "Instant", "1-2 hours", etc.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("payment_methods")
}

// Manual Payment Model
model ManualPayment {
  id                String   @id @default(cuid())
  userId            String
  paymentMethodId   String
  amount            Float
  transactionId     String?
  paymentProof      String?  // Screenshot or proof image URL
  status            String   @default("PENDING") // "PENDING", "VERIFIED", "REJECTED"
  adminNotes        String?  // Admin notes for verification
  verifiedBy        String?
  verifiedAt        DateTime?
  rejectionReason   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("manual_payments")
}

// Product Review Model
model Review {
  id                  String   @id @default(cuid())
  userId              String
  productId           String
  orderId             String?
  rating              Int      // 1-5 stars
  comment             String?
  images              String?  // JSON array of image URLs
  isVerifiedPurchase  Boolean  @default(false)
  isHelpful           Int      @default(0) // Helpful votes count
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order               Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  
  @@index([productId])
  @@index([userId])
  @@map("reviews")
}

// Delivery Review Model
model DeliveryReview {
  id               String   @id @default(cuid())
  userId           String
  orderId          String   @unique
  rating           Int      // 1-5 stars overall delivery rating
  comment          String?
  deliverySpeed    Int?     // 1-5 stars for delivery speed
  packagingQuality Int?     // 1-5 stars for packaging quality
  courierBehavior  Int?     // 1-5 stars for courier behavior
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("delivery_reviews")
}
