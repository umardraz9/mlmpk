'use client';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { profileService } from '@/lib/profile-service';
import { 
  Calendar, 
  Users, 
  Heart, 
  MessageCircle, 
  Share2, 
  Edit, 
  Package,
  Crown,
  Star
} from 'lucide-react';
import Image from 'next/image';
interface ProfileData {
  id: string;
  name?: string | null;
  email?: string | null;
  phone?: string | null;
  bio?: string | null;
  image?: string | null;
  coverImage?: string | null;
  address?: string | null;
  referralCode?: string | null;
  joinDate?: string | null;
}


interface User {
  id: string;
  name: string | null;
  username: string | null;
  image: string | null;
  bio: string | null;
  coverImage: string | null;
  createdAt: string | Date;
}

type ViewerLike = { id: string } | null;

interface ReelItem {
  id: string;
  content: string | null;
  videoUrl: string | null;
  coverUrl: string | null;
  createdAt: string | Date;
}

interface ProfessionalProfileProps {
  user: User;
  followersCount: number;
  followingCount: number;
  likesCount: number;
  viewerLike: ViewerLike;
  reels: ReelItem[];
  viewerId: string | null;
  isOwnProfile: boolean;
}

export default function ProfessionalProfile({
  user,
  followersCount,
  followingCount,
  likesCount,
  viewerLike,
  reels,
  viewerId,
  isOwnProfile,
}: ProfessionalProfileProps) {
  const router = useRouter();
  const [profileData, setProfileData] = useState<ProfileData | null>(null);
  const [isFollowing, setIsFollowing] = useState<boolean>(false);
  const [isLiked, setIsLiked] = useState<boolean>(!!viewerLike);
  const [currentLikesCount, setCurrentLikesCount] = useState<number>(likesCount);

  useEffect(() => {
    const unsubscribe = profileService.onProfileUpdate((p) => setProfileData(p));
    return unsubscribe;
  }, []);

  const displayData = profileData || {
    name: user.name,
    image: user.image,
    bio: user.bio,
    joinDate: (typeof user.createdAt === 'string' ? user.createdAt : user.createdAt.toISOString()),
  };

  const handleFollow = async () => {
    try {
      const res = await fetch('/api/social/follow', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user.id }),
      });
      const data = await res.json();
      if (res.ok && data?.success) {
        setIsFollowing(!!data.isFollowing);
      }
    } catch (e) {
      console.error('Failed to toggle follow:', e);
    }
  };

  const handleLike = async () => {
    try {
      const res = await fetch('/api/social/profile/like', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user.id }),
      });
      const data = await res.json();
      if (res.ok && data?.success) {
        setIsLiked(!!data.isLiked);
        if (typeof data.likesCount === 'number') {
          setCurrentLikesCount(data.likesCount);
        }
      }
    } catch (e) {
      console.error('Failed to like profile:', e);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Cover Image */}
      <div className="relative h-64 bg-gradient-to-r from-blue-600 to-purple-600">
        {user.coverImage && (
          <Image
            src={user.coverImage}
            alt="Cover"
            fill
            className="object-cover"
            sizes="100vw"
            priority
          />
        )}
        <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent" />
      </div>

      {/* Profile Info */}
      <div className="relative -mt-16 pb-8">
        <div className="container mx-auto px-4">
          <div className="bg-white rounded-xl shadow-lg p-6 md:p-8 -mt-16 relative z-10">
            <div className="flex flex-col md:flex-row items-start md:items-end gap-6">
            {/* Profile Picture */}
            <div className="relative w-32 h-32">
              <Image
                src={displayData.image || '/images/default-avatar.png'}
                alt={displayData.name || 'Profile'}
                fill
                className="rounded-full border-4 border-white shadow-lg object-cover"
                sizes="128px"
                priority
              />
              {isOwnProfile && (
                <Button
                  size="sm"
                  className="absolute bottom-2 right-2 rounded-full p-2"
                  onClick={() => window.location.href = '/profile'}
                >
                  <Edit className="h-3 w-3" />
                </Button>
              )}
            </div>

            {/* Profile Details */}
            <div className="flex-1">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                  <h1 className="text-3xl font-bold text-gray-900 mb-2">
                    {displayData.name || 'Anonymous User'}
                  </h1>
                  {user.username && (
                    <p className="text-gray-600 mb-2">@{user.username}</p>
                  )}
                  {displayData.bio && (
                    <p className="text-gray-700 max-w-2xl">{displayData.bio}</p>
                  )}
                </div>

                {/* Action Buttons */}
                {!isOwnProfile && viewerId && (
                  <div className="flex gap-2">
                    <Button
                      variant={isFollowing ? "outline" : "default"}
                      onClick={handleFollow}
                    >
                      <Users className="h-4 w-4 mr-2" />
                      {isFollowing ? 'Unfollow' : 'Follow'}
                    </Button>
                    <Button variant="outline" onClick={handleLike}>
                      <Heart className={`h-4 w-4 mr-2 ${isLiked ? 'fill-red-500 text-red-500' : ''}`} />
                      Like
                    </Button>
                    <Button variant="outline" onClick={() => router.push(`/messages/${user.id}`)}>
                      <MessageCircle className="h-4 w-4 mr-2" />
                      Message
                    </Button>
                    <Button variant="outline">
                      <Share2 className="h-4 w-4" />
                    </Button>
                  </div>
                )}
              </div>

              {/* Stats */}
              <div className="flex gap-6 mt-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">{followersCount}</div>
                  <div className="text-sm text-gray-600">Followers</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">{followingCount}</div>
                  <div className="text-sm text-gray-600">Following</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">{currentLikesCount}</div>
                  <div className="text-sm text-gray-600">Likes</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">{reels.length}</div>
                  <div className="text-sm text-gray-600">Posts</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Content Tabs */}
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Recent Posts</CardTitle>
              </CardHeader>
              <CardContent>
                {reels.length > 0 ? (
                  <div className="space-y-4">
                    {reels.map((reel) => (
                      <div key={reel.id} className="border rounded-lg p-4">
                        <p className="text-gray-900">{reel.content}</p>
                        <div className="flex items-center gap-2 mt-2 text-sm text-gray-500">
                          <Calendar className="h-4 w-4" />
                          {new Date(reel.createdAt).toLocaleDateString()}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <Package className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>No posts yet</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Profile Info */}
            <Card>
              <CardHeader>
                <CardTitle>Profile Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {displayData.joinDate && (
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <span className="text-sm">
                      Joined {new Date(displayData.joinDate).toLocaleDateString()}
                    </span>
                  </div>
                )}
                
                <div className="flex items-center gap-2">
                  <Crown className="h-4 w-4 text-yellow-500" />
                  <Badge variant="outline" className="text-yellow-600 border-yellow-200">
                    Gold Member
                  </Badge>
                </div>
              </CardContent>
            </Card>

            {/* Achievements */}
            <Card>
              <CardHeader>
                <CardTitle>Achievements</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-3">
                  {[
                    { name: 'Verified', icon: Star, color: 'text-blue-500' },
                    { name: 'Top Performer', icon: Crown, color: 'text-yellow-500' },
                    { name: 'Community Leader', icon: Users, color: 'text-green-500' },
                    { name: 'Early Adopter', icon: Calendar, color: 'text-purple-500' }
                  ].map((achievement) => {
                    const IconComponent = achievement.icon;
                    return (
                      <div key={achievement.name} className="text-center p-3 border rounded-lg">
                        <IconComponent className={`h-6 w-6 mx-auto mb-1 ${achievement.color}`} />
                        <div className="text-xs text-gray-600">{achievement.name}</div>
                      </div>
    </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
    </div>
  );
}
